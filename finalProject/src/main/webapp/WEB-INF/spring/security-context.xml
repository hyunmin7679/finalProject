<?xml version="1.0" encoding="UTF-8"?>  
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<context:component-scan base-package="com.fp.pet"/>

	<http auto-config="true" use-expressions="true">
           <csrf disabled="true"/>
           <!-- 스마트 에디터 -->
           <headers>
              <frame-options policy="SAMEORIGIN"/>
              <hsts disabled="true"/>
           </headers>
           
           <!-- 모든 사용자 항상 접근 -->
           <intercept-url pattern="/" access="permitAll"/>
           <intercept-url pattern="/index.jsp" access="permitAll"/>
           <intercept-url pattern="/member/login" access="permitAll"/>
           <intercept-url pattern="/member/member" access="permitAll"/>
           <intercept-url pattern="/member/userIdCheck" access="permitAll"/>
           <intercept-url pattern="/member/complete" access="permitAll"/>
           <intercept-url pattern="/member/pwdFind" access="permitAll"/>
           <intercept-url pattern="/member/idFind" access="permitAll"/>
           <intercept-url pattern="/member/expired" access="permitAll"/>
           
           
           
           <intercept-url pattern="/resources/**" access="permitAll"/>
           <intercept-url pattern="/bootstrapTemp/**" access="permitAll"/>
           <intercept-url pattern="/uploads/img/**" access="permitAll"/>
           
           <!-- admin 페이지 -->
           <intercept-url pattern="/admin/**" access="hasAnyRole('ROLE_ADMIN','ROLE_EMP')"/>
           
           <!-- 모든 페이지 -->
           <intercept-url pattern="/**" access="hasAnyRole('ROLE_ADMIN','ROLE_EMP','ROLE_USER')"/>
           
           <!-- 사용자 정의 로그인 폼 -->
           <form-login login-page="/member/login"
           login-processing-url="/member/login"
           username-parameter="userId"
           password-parameter="userPwd"
           default-target-url="/"
           always-use-default-target="true"
           authentication-success-handler-ref="loginSuccessHandler"
           authentication-failure-handler-ref="loginFailureHandler"/>
           
           <!--  로그 아웃  -->
           <logout logout-url="/member/logout"
           invalidate-session="true"
           logout-success-url="/"/>
           
           <!--  접근 권한이 없는 경우 -->
           <access-denied-handler error-page="/member/noAuthorized"/>
           
           <!-- 동일 아이디로 동시에 1명만 로그인(기존 세션 만료) -->
           <session-management>
              <concurrency-control max-sessions="1"
              expired-url="/member/expired"/>
           </session-management>
           
           <!-- AJAX 로그인 검사를 위한 필터 등록 -->
           <!-- EXCEPTION_TRANSLATION_FILTER : 보호된 요청을 처리하는 동안
           		발생하는 예외  -->
           <custom-filter ref="ajaxSessionTimeoutFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
           
   </http>
   
   
   
   <beans:bean id="loginSuccessHandler" class="com.fp.pet.security.LoginSuccessHandler">
		<beans:property name="defaultUrl" value="/"/>
	</beans:bean>
	
	<beans:bean id="loginFailureHandler" class="com.fp.pet.security.LoginFailureHandler"> 
		<beans:property name="defaultFailureUrl" value="/member/login?login_error"/>
	</beans:bean>
	
	<!-- bcrypt : 패스워드에 특화된 password hashing function -->
	<beans:bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<!-- 테이블의 로그인 유저 정보 -->
	<jdbc-user-service data-source-ref="dataSource"
		id="userService"
		users-by-username-query="SELECT userId AS username, userPwd AS password, enabled FROM member1 WHERE userId=?"
		authorities-by-username-query="SELECT userId AS username, 'ROLE_' || authority AS authority FROM memberAuthority WHERE userId= ?"
	/>

	<authentication-manager>
	<authentication-provider user-service-ref="userService">
			<password-encoder ref="bcryptEncoder"/>
		</authentication-provider>
	</authentication-manager>
	
	
	<!-- AJAX에서 예외가 발생할 경우 실행할 필터 -->
	<beans:bean id="ajaxSessionTimeoutFilter" class="com.fp.pet.security.AjaxSessionTimeoutFilter">
		<beans:property name="ajaxHeader" value="AJAX"/>
	</beans:bean>
</beans:beans>
