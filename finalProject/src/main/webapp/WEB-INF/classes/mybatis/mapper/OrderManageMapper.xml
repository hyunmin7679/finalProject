<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fp.pet.admin.mapper.OrderManageMapper">

	<select id="dataCount" parameterType="map" resultType="Integer" >
		SELECT NVL(COUNT(*), 0) from productOrder
		<where>
			<if test="state == 'before'">
				orderState = 0
			</if>
			<if test="state == 'after'">
				orderState = 1
			</if>
		</where>
		
	</select>

	<select id="listOrder" parameterType="map"
		resultType="com.fp.pet.admin.domain.OrderManage">
		SELECT po.orderNum, po.memberIdx, NVL(userName,'손님') userName,
		totalMoney,
		usedSaved, deliveryCharge, payment, cancelAmount,
		TO_CHAR(orderDate, 'YYYY-MM-DD HH24:MI') orderDate,
		orderState, deliveryName, invoiceNumber,
		NVL(totalOrderCount, 0) totalOrderCount, NVL(totalQty, 0) totalQty,
		NVL(detailCancelCount, 0) detailCancelCount
		FROM productOrder po
		LEFT OUTER JOIN member1 m ON
		po.memberIdx = m.memberIdx
		LEFT OUTER JOIN (
		SELECT orderNum, COUNT(*) totalOrderCount, SUM(qty) totalQty,
		COUNT(DECODE(detailState,3,1,4,1,5,1,10,1,11,1,12,1))
		detailCancelCount
		FROM orderDetail
		GROUP BY orderNum
		) od ON po.orderNum = od.orderNum
		<where>
			<if test="state == 'before'">
				po.orderState = 0
			</if>
			<if test="state == 'after'">
				po.orderState = 1	
				
				<if test="searchNum != null and searchNum!=''  ">
					and po.orderNum = #{searchNum}
				</if>
				<if test="startDate != null and startDate!=''  ">
					and po.orderDate BETWEEN TO_DATE(#{startDate}, 'YYYY-MM-DD') AND TO_DATE(#{endDate}, 'YYYY-MM-DD')
				</if>
			</if>
		</where>
		ORDER BY po.orderNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>

	<select id="findById" parameterType="String"
		resultType="com.fp.pet.admin.domain.OrderManage">
		SELECT po.orderNum, po.memberIdx, NVL(userName,'손님')
		userName, orderDate, totalMoney,
		usedSaved, deliveryCharge, payment, cancelAmount, orderState,
		TO_CHAR(orderStateDate, 'YYYY-MM-DD HH24:MI:SS') orderStateDate,
		deliveryName, invoiceNumber,
		payMethod, cardName, authNumber, authDate
		FROM productOrder po
		LEFT OUTER JOIN
		member1 m ON po.memberIdx = m.memberIdx
		LEFT OUTER JOIN payDetail pd ON
		po.orderNum = pd.orderNum
		WHERE po.orderNum = #{orderNum}
	</select>

	<select id="findByOrderDetails" parameterType="String"
		resultType="com.fp.pet.admin.domain.OrderDetailManage">
		 SELECT od.orderNum, od.orderDetailNum, qty, od.price,couponPrice,couponNum
		,od.salePrice, productMoney, od.savedMoney,productCancelM,
		op.detailNum, op.optionValue, od.detailNum2, op2.optionValue optionValue2,
		od.productNum, productName,
		od.detailState
		FROM orderDetail od
		JOIN product p ON od.productNum = p.productNum
		JOIN
		optionDetail op ON od.detailNum = op.detailNum
		JOIN optionDetail op2 ON
		od.detailNum2 = op2.detailNum
		WHERE od.orderNum = #{orderNum}
	</select>

	<update id="updateOrderInvoiceNumber" parameterType="map">
		UPDATE
		productOrder SET orderState = #{orderState}, orderStateDate = SYSDATE,
		deliveryName = #{deliveryName}, invoiceNumber = #{invoiceNumber}
		WHERE
		orderNum = #{orderNum}
	</update>


	<update id="cancleAllProduct" parameterType="map">
		UPDATE productOrder
		SET orderState = 6, orderStateDate = SYSDATE
		WHERE orderNum =
		#{orderNum}
	</update>


	<update id="cancledetailProduct" parameterType="map">
		UPDATE
		orderDetail SET detailState = 3
		WHERE orderNum = #{orderNum}
	</update>

	<select id="listDetailStateInfo" parameterType="long"
		resultType="map">
		SELECT stateNum, orderDetailNum, d.memberIdx, NVL(userName,
		'손님') userName, detailState,
		stateMemo, TO_CHAR(detailStateDate, 'YYYYMMDD HH24:MI') detailStateDate
		FROM
		detailStateInfo d
		LEFT OUTER JOIN member1 m ON d.memberIdx =
		m.memberIdx
		WHERE orderDetailNum = #{orderDetailNum}
		ORDER BY stateNum
		DESC
	</select>

	<update id="updateOrderDetailState" parameterType="map">
		UPDATE
		orderDetail SET detailState = #{detailState}
		WHERE orderDetailNum =
		#{orderDetailNum}
	</update>


	<insert id="insertDetailStateInfo" parameterType="map">	
		INSERT INTO detailStateInfo(stateNum, orderDetailNum, memberIdx, detailState, stateMemo, detailStateDate) VALUES
			(detailState_seq.NEXTVAL, #{orderDetailNum}, #{memberIdx1}, #{detailState}, 
				#{stateMemo,jdbcType=VARCHAR}, SYSDATE)
	</insert>
	
	<update id="updateCancelAmount" parameterType="map">
		UPDATE productOrder SET cancelAmount = #{cancelAmount}
		WHERE orderNum = #{orderNum}
	</update>
	
	<update id="updateProductCancleAmount" parameterType="map">
		UPDATE orderDetail SET productCancelM = #{productMoney}
		WHERE orderDetailNum = #{orderDetailNum}
	</update>
	
	<!-- 주문에 대한 상세 주문의 주문 취소 이외의 개수 -->
	<select id="totalOrderCount" parameterType="String" resultType="Integer">
		SELECT NVL(COUNT(*), 0) orderCount
		FROM orderDetail 
		WHERE orderNum = #{orderNum} AND (detailState != 3 AND detailState != 5 AND detailState != 12)
	</select>
	
	<update id="updateOrderState" parameterType="map">
		UPDATE productOrder SET orderState = #{orderState}, orderStateDate = SYSDATE
		WHERE orderNum = #{orderNum}
	</update>
	
	<insert id="updatePoint" parameterType="map">
		insert into
		point(pointNum,orderNum,memberIdx,reg_date,memo,p_qyt,p_sort)
		values(point_seq.NEXTVAL,#{orderNum},#{memberIdx},
		sysdate,'판매취소로 인한 포인트 회수',#{savedMoney},NULL)
	</insert>
	
	
	<select id="findByStock" parameterType="map" resultType="map">
		select
		stockNum,totalStock from productStock
		where productNum = #{productNum}
		and detailNum = #{detailNum} and detailNum2 = #{detailNum2}
	</select>
	
	<update id="updateStock" parameterType="map">
		update productStock set 
		totalStock = #{totalStock} where stockNum = #{stockNum}
	</update>
	
	<insert id="updateUsedSaved" parameterType="map">
		insert into
		point(pointNum, orderNum ,memberIdx,reg_date,memo,p_qyt,p_sort)
		values(point_seq.NEXTVAL,#{orderNum},#{memberIdx},sysdate,
		'판매취소로 인한 포인트 복구',#{usedSaved},NULL)
	</insert>
	<update id = "updateCoupon" parameterType="map">
		update memberCoupon set use = 0 where couponNum = #{couponNum}
	</update>
	
</mapper>