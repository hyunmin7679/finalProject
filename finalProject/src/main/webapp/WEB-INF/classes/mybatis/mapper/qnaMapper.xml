<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fp.pet.mapper.QnaMapper">
	<select id="productQnaSeq" resultType="Long">
		select productQna_seq.NEXTVAL from dual
	</select>	

	<insert id="insertQna" parameterType="com.fp.pet.domain.Qna">
		INSERT INTO productQna(num, productNum, memberIdx, secret, q_subject, question, question_date, showQuestion)
			VALUES (#{num},#{productNum,jdbcType=BIGINT},#{memberIdx},#{secret},#{q_subject}, #{question}, SYSDATE, 1)
	</insert>
	<insert id="insertQnaFile" parameterType="com.fp.pet.domain.Qna">
      INSERT INTO productQnaFile(fileNum, num, filename)
         VALUES(productQnaFile_seq.NEXTVAL,#{num}, #{filename})
    </insert>
	

	<select id="findByFileId" parameterType="Long" resultType="com.fp.pet.domain.Qna">
	   SELECT fileNum, num, filename
	   FROM productQnaFile
	   WHERE fileNum = #{fileNum}
	</select>
	
	<delete id="deleteQnaFile" parameterType="map" >
	   DELETE FROM productQnaFile
	   WHERE ${field} = #{num}
	</delete>
	
	<select id="listQnaFile" parameterType="Long" resultType="com.fp.pet.domain.Qna">
	   SELECT fileNum, num, filename
	   FROM productQnaFile
	   WHERE num = #{num}
	</select>
   

	<sql id="where-list">
      <if test="schType=='all'">
         ( INSTR(q_subject, #{kwd}) &gt; 0 
            OR INSTR(productName, #{kwd}) &gt; 0 )
      </if>
      <if test="schType=='userName'">
         userName=#{kwd}
      </if>
      <if test="schType=='productName'">
         INSTR(productName, #{kwd}) &gt; 0 
      </if>
      
      <if test="schType=='question_date'">
         ( TO_CHAR(q.question_date, 'YYYY-MM-DD') = #{kwd}
            OR TO_CHAR(q.question_date, 'YYYYMMDD') = #{kwd} )
      </if>
   </sql>
   
   <sql id="where-list2">
      <if test="schType=='all'">
         productNum = #{kwd}
         OR INSTR(productName, #{kwd}) &gt; 0
      </if>
      
      <if test="schType=='productName'">
         INSTR(productName, #{kwd}) &gt; 0 
      </if>
   </sql>


	<!-- 글개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM productQna q
		JOIN member1 m ON q.memberIdx=m.memberIdx
		LEFT OUTER JOIN product p ON q.productNum=p.productNum
		<where>
			showQuestion = 1
			<if test="kwd!=null and kwd!='' ">
				AND <include refid="where-list"/>
			</if>
			<if test="productNum != null">
				and p.productNum = #{productNum}
			</if>
		</where>
	</select>
	
	
	
	<!-- 상품선택 시 상품개수 -->
	<select id="dataCount2" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM product p
		<where>
			<if test="kwd!=null and kwd!='' ">
				<include refid="where-list2"/>
			</if>
		</where>
	</select>

	<!-- 글리스트 -->
    <select id="listQna" parameterType="map" resultType="com.fp.pet.domain.Qna">
		SELECT q.num, q.productNum, p.productName, thumbnail, q.memberIdx, secret, m.userName, q_subject, m2.userId answerId, m2.userName answerName,
			   TO_CHAR(question_date, 'YYYY-MM-DD') question_date, answer_date, question, answer,
			   filename, showQuestion
		FROM productQna q
		JOIN member1 m ON q.memberIdx=m.memberIdx
		LEFT OUTER JOIN product p ON q.productNum=p.productNum
		LEFT OUTER JOIN (
			SELECT num, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY fileNum) filename
            FROM productQnaFile
            GROUP BY num	
		) f ON q.num=f.num
		LEFT OUTER JOIN member1 m2 ON answerId = m2.userId
		<where>
			showQuestion = 1
			<if test="kwd!=null and kwd!='' ">
				AND <include refid="where-list"/>
			</if>
			<if test="productNum != null">
				and p.productNum = #{productNum}
			</if>
		</where>   
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	
	<!-- 상품검색 리스트 --> 
	<select id="listProduct" parameterType="map" resultType="com.fp.pet.domain.Qna">
		SELECT productNum, productName, thumbnail 
		FROM product
		<where>
			<if test="kwd!=null and kwd!='' ">
				AND <include refid="where-list2"/>
			</if>
		</where>   
		ORDER BY productNum DESC
	</select>
	
    
	<!-- 글보기 -->
	<select id="findById" resultType="com.fp.pet.domain.Qna" parameterType="Long">
		SELECT num, q.memberIdx, m.userName, q_subject, question, thumbnail,q.productNum,productName,
				question_date, answerId, a.userName answerName, answer, answer_date
		FROM productQna q
		JOIN member1 m ON q.memberIdx=m.memberIdx
		LEFT OUTER JOIN product p ON q.productNum=p.productNum
		LEFT OUTER JOIN member1 a ON q.answerId = a.userId
		WHERE num = #{num}
	</select>
	 
	<select id="findByPrev" parameterType="map" resultType="com.fp.pet.domain.Qna">
		SELECT q.num, q.q_subject, q.secret, m.userId, q.memberIdx, thumbnail,q.productNum,productName
		FROM productQna q
		JOIN member1 m ON q.memberIdx=m.memberIdx
		LEFT OUTER JOIN product p ON q.productNum=p.productNum
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
			AND (q.num &gt; #{num})
		</where>
		ORDER BY num ASC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<select id="findByNext" parameterType="map" resultType="com.fp.pet.domain.Qna">
		SELECT q.num, q.q_subject, q.secret, m.userId, q.memberIdx, thumbnail,q.productNum,productName
		FROM productQna q
		JOIN member1 m ON q.memberIdx=m.memberIdx
		LEFT OUTER JOIN product p ON q.productNum=p.productNum
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
			AND (q.num &lt; #{num})
		</where>
		ORDER BY num DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<update id="updateQna" parameterType="com.fp.pet.domain.Qna">
      UPDATE productQna SET productNum=#{productNum,jdbcType=BIGINT}, q_subject=#{q_subject}, question=#{question}, secret=#{secret}
      WHERE num = #{num}
   </update>

	

	<!-- 삭제 -->
	<delete id="deleteQna" parameterType="Long">
		DELETE FROM productQna WHERE num = #{num}
	</delete>
	
	
	
	<!-- 내 활동 -->
	 <select id="listQna2" parameterType="map" resultType="com.fp.pet.domain.Qna">
		SELECT q.num, q.productNum, p.productName, thumbnail, q.memberIdx, secret, m.userName, q_subject, m2.userId answerId, m2.userName answerName,
			   TO_CHAR(question_date, 'YYYY-MM-DD') question_date, answer_date, question, answer,
			   filename, showQuestion
		FROM productQna q
		JOIN member1 m ON q.memberIdx=m.memberIdx
		JOIN product p ON q.productNum=p.productNum
		LEFT OUTER JOIN (
			SELECT num, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY fileNum) filename
            FROM productQnaFile
            GROUP BY num	
		) f ON q.num=f.num
		LEFT OUTER JOIN member1 m2 ON answerId = m2.userId
		where showQuestion = 1
        and q.productNum is not null
		and q.q_subject like '[상품]%'
        and q.memberIdx = #{memberIdx}
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="dataCount3" parameterType="map" resultType="Integer">
		select nvl(count(*),0)
		FROM productQna q
		JOIN member1 m ON q.memberIdx=m.memberIdx
		JOIN product p ON q.productNum=p.productNum
        where showQuestion = 1
        and q.productNum is not null
		and q.q_subject like '[상품]%'
        and q.memberIdx = #{memberIdx}
	</select>
	
	
</mapper>