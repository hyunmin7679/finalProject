<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fp.pet.admin.mapper.UserManageMapper">

	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT
		NVL(COUNT(*),0) FROM member1
	</select>
	<select id="dataCountpurchase" parameterType="map"
		resultType="Integer">
		SELECT COUNT(*) AS rowCount
		FROM orderDetail o
		JOIN
		productOrder p ON o.ordernum = p.ordernum
		JOIN product pp ON
		o.productnum = pp.productnum
		WHERE memberIdx = #{memberIdx}
	</select>

	<select id="userCount" parameterType="map" resultType="Integer">
		SELECT
		NVL(COUNT(*),0) FROM member
	</select>

	<select id="todayregcount" parameterType="map"
		resultType="Integer">
		select nvl(count(*), 0) from member1 where
		to_char(to_date(register_date,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD'))
	</select>

	<select id="yesterdayregcount" parameterType="map"
		resultType="Integer">
		select nvl(count(*), 0) from member1 where
		to_char(to_date(register_date,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-1)
	</select>

	<select id="activeuserCount" parameterType="map"
		resultType="Integer">
		SELECT SUM(daily_count) AS total_count
		FROM(
		select
		nvl(count(*), 0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD'))
		union all
		select nvl(count(*), 0)as
		daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd'))
		=
		to_char(to_date(sysdate,'YY-MM-DD')-1)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-2)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-3)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-4)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-5)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-6))
		subquery
	</select>
	<select id="activeuserCountlastweek" parameterType="map"
		resultType="Integer">
		SELECT SUM(daily_count) AS total_count
		FROM(
		select
		nvl(count(*), 0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-7)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-8)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-9)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-10)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-11)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-12)
		union all
		select nvl(count(*),
		0)as daily_count from member1 where
		to_char(to_date(last_login,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-13))
		subquery
	</select>

	<select id="purchaseuserCount" parameterType="map"
		resultType="Integer">
		SELECT SUM(daily_purchase) AS total_count
		FROM(
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD'))
		union all
		select nvl(count(distinct
		memberIdx),0 ) as daily_purchase from productOrder
		where
		to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-1)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-2)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-3)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-4)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-5)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-6))
		subquery
	</select>

	<select id="purchaseuserCountweekbefore" parameterType="map"
		resultType="Integer">
		SELECT SUM(daily_purchase) AS total_count
		FROM(
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-7)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-8)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-9)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-10)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-11)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-12)
		union all
		select
		nvl(count(distinct memberIdx),0 ) as daily_purchase from productOrder
		where to_char(to_date(orderdate,'yy-mm-dd')) =
		to_char(to_date(sysdate,'YY-MM-DD')-13))
		subquery
	</select>

	<select id="deactiveuserCount" parameterType="map"
		resultType="Integer">
		select count(*) from member1 where enabled=0
	</select>

	<select id="purchaseUserCount" parameterType="map"
		resultType="Integer">
		select count(distinct memberIdx) from productOrder
	</select>



	<sql id="where-list">
		<choose>
			<when test="schType == 'all' ">
				membership >=1
			</when>
			<when test="schType == 'admin' ">
				membership >=31
			</when>
			<when test="schType == 'active'">
				enabled=1
			</when>
			<otherwise>
				enabled=0
			</otherwise>
		</choose>
	</sql>


	<select id="listUser" parameterType="map"
		resultType="com.fp.pet.domain.Member">
		SELECT
		m.memberIdx,
		m.membership,
		n.userId,
		n.userName,
		CASE
		WHEN COALESCE(SUM(p.payment), 0) = 0 THEN 0
		ELSE COALESCE(COUNT(*), 0)
		END AS ordercount,
		COALESCE(SUM(p.payment), 0) AS totalPayment,
		n.enabled,
		CASE
		WHEN n.enabled = 0 THEN '휴면'
		WHEN n.enabled = 1 THEN '활동'
		END AS enabledstate,
		n.register_date, n.userPoint, o.email, o.tel, o.zip,
		o.addr1, o.addr2,
		to_date(sysdate,'yy-mm-dd')-to_date(n.register_date,'yy-mm-dd')
		regdays
		from member m
		left outer join member1 n on
		m.memberIdx=n.memberIdx
		left outer join member2 o on n.userId=o.userId
		left outer join productOrder p on m.memberIdx=p.memberIdx AND p.cancelamount = 0
		<if test="kwd != null and kwd != ''">
			WHERE INSTR(n.userName, #{kwd}) &gt; 0
		</if>
		GROUP BY m.memberIdx, m.membership, n.userId, n.userName, n.enabled,
		n.register_date,
		n.userPoint, o.email, o.tel,o.zip, o.addr1, o.addr2
		<choose>
			<when test="orders==1">ORDER BY regdays</when>
			<when test="orders==2">ORDER BY regdays DESC</when>
			<when test="orders==3">ORDER BY totalPayment</when>
			<when test="orders==4">ORDER BY totalPayment DESC</when>
			<when test="orders==5">ORDER BY enabled DESC</when>
			<when test="orders==6">ORDER BY enabled</when>
			<otherwise>ORDER BY n.userName</otherwise>
		</choose>
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>

	<select id="listUserinfo" parameterType="map"
		resultType="com.fp.pet.domain.Member">
		select m.memberIdx, m.membership,COALESCE(SUM(p.payment), 0) AS totalPayment,
		case when m.membership=1 then '일반회원'
		when m.membership=31
		then '사원'
		when m.membership=51 then '임원'
		when m.membership=99 then
		'최고관리자'
		end as memberstate,
		n.userId, n.userName, n.enabled,
		case when
		n.enabled=0 then '휴면'
		when n.enabled=1 then '활동'
		end as enabledstate,
		n.register_date, o.email, o.tel,
		o.zip, o.addr1, o.addr2,
		to_date(sysdate,'yy-mm-dd')-to_date(n.register_date,'yy-mm-dd')
		regdays
		from member m
		left outer join member1 n on m.memberIdx=n.memberidx
		left outer join member2 o on n.userId=o.userId
		left outer join productOrder p on m.memberIdx=p.memberIdx and p.cancelamount=0
        where m.memberIdx=#{memberIdx}
		GROUP BY m.memberIdx, m.membership, n.userId,
		n.userName, n.enabled,
		n.register_date,
		n.userPoint, o.email,
		o.tel,o.zip, o.addr1, o.addr2
	</select>
	

	<select id="catanaly">
		SELECT
		p.categoryNum,
		CASE
		WHEN p.categoryNum = 1 THEN
		'건식사료'
		WHEN p.categoryNum = 2 THEN '습식사료'
		WHEN p.categoryNum = 3 THEN
		'우유/분유'
		WHEN p.categoryNum = 4 THEN '고양이사료'
		WHEN p.categoryNum = 5 THEN
		'강아지껌'
		WHEN p.categoryNum = 6 THEN '육포/사시미'
		WHEN p.categoryNum = 7 THEN
		'수제간식'
		WHEN p.categoryNum = 8 THEN '비스켓/스낵'
		WHEN p.categoryNum = 9 THEN
		'캔/파우치'
		WHEN p.categoryNum = 10 THEN '고양이간식'
		WHEN p.categoryNum = 11
		THEN '위생/배변'
		WHEN p.categoryNum = 12 THEN '건강관리'
		WHEN p.categoryNum = 13
		THEN '장난감'
		WHEN p.categoryNum = 14 THEN '미용/목욕'
		WHEN p.categoryNum = 15
		THEN '하우스'
		WHEN p.categoryNum = 16 THEN '급식기/급수기'
		WHEN p.categoryNum =
		17 THEN '의류/액세서리'
		WHEN p.categoryNum = 18 THEN '목줄/가슴줄'
		ELSE
		TO_CHAR(p.categoryNum)
		END AS category_description,
		pc.parentNum,
		CASE
		WHEN pc.parentNum = 19 THEN '사료'
		WHEN pc.parentNum = 20 THEN '간식'
		WHEN
		pc.parentNum = 21 THEN '용품'
		ELSE TO_CHAR(pc.parentNum)
		END AS
		category_big,
		COUNT(*) AS category_count,
		COALESCE(SUM(pr.score), 0) /
		COUNT(*) * 20 AS average_score
		FROM
		orderdetail O
		JOIN product p ON
		O.productNum = p.productNum
		JOIN detailstateinfo d ON O.orderdetailnum
		= d.orderdetailnum
		JOIN productCategory pc ON p.categorynum =
		pc.categorynum
		JOIN productReview pr ON O.orderDetailNum = pr.num
		WHERE
		d.memberIdx =#{memberIdx}
		GROUP BY
		p.categoryNum, pc.parentNum
		order by average_score desc
	</select>

	<select id="purchaselist" parameterType="map"
		resultType="com.fp.pet.domain.Purchase">
		 select o.orderNum, o.price, o.savedMoney, o.detailState,
        case when o.detailState=0 then '구매확정대기'
        when o.detailState=1 then '구매확정'
        when o.detailState=2 then '자동구매확정'
        when o.detailState=3 then '판매취소'
        when o.detailState=4 then '주문취소요청'
        when o.detailState=5 then '주문취소완료'
        when o.detailState=6 then '교환요청'
        when o.detailState=7 then '교환접수'
        when o.detailState=8 then '교환발송완료'
        when o.detailState=9 then '교환불가'
        when o.detailState=10 then '반품요청'
        when o.detailState=11 then '반품접수'
        when o.detailState=12 then '반품완료'
        when o.detailState=13 then '반품불가'
        when o.detailState=14 then '기타'
        end as detailstates,
        o.qty,
		to_char(p.orderdate,'yyyy-mm-dd') orderdate,  
		pp.productName
		from orderDetail o join productOrder p on
		o.ordernum=p.ordernum
		join product pp on o.productnum=pp.productnum
		where memberIdx =#{memberIdx}
		order by orderdate desc
		OFFSET #{offset}
		ROWS FETCH FIRST #{size} ROWS ONLY
	</select>

	<update id="sancUser">
		update member1 set
		enabled=0, sancNum=#{sancNum},
		sancMemo=#{sancMemo}
		where memberIdx=#{memberIdx}
	</update>

	<update id="unsancUser">
		update member1 set
		enabled=1, sancNum=null,
		sancMemo=null
		where memberIdx=#{memberIdx}
	</update>
	
	<select id="findpoint" >
	select sum(p_qyt) from point where memberIdx=#{memberIdx}
	</select>


</mapper>