<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fp.pet.admin.mapper.ExchangeMapper">

	<select id="dataCount" parameterType="map"
		resultType="int">
		SELECT COUNT(*) AS count
		FROM orderDetail od
		JOIN product p ON od.productNum = p.productNum
		JOIN optionDetail op ON od.detailNum = op.detailNum
		JOIN optionDetail op2 ON od.detailNum2 = op2.detailNum
		LEFT JOIN optionDetail op3 ON od.detailNum3 = op3.detailNum
		LEFT JOIN optionDetail op4 ON od.detailNum4 = op4.detailNum
		LEFT JOIN orderChange dsi ON od.orderDetailNum = dsi.orderDetailNum
		LEFT JOIN payDetail pd ON od.orderNum = pd.orderNum
		LEFT JOIN productOrder po ON od.orderNum = po.orderNum
		LEFT JOIN member1 m ON po.memberIdx = m.memberIdx
		<where>
			<if test="state == 'returnApply'">
				AND dsi.changeState = 6
			</if>
			<if test="state == 'returnReceipt'">
				AND dsi.changeState = 7
			</if>
			<if test="state == 'returnComplete'">
				AND dsi.changeState = 8
			</if>
			<if test="state == 'returnNo'">
				AND dsi.changeState = 9
			</if>
		</where>
	</select>

	<select id="listOrder" parameterType="map"
		resultType="com.fp.pet.admin.domain.OrderDetailManage">

		SELECT
		usedSaved,
		od.savedMoney,
		od.orderNum,
		od.orderDetailNum,
		od.qty,
		od.price,
		od.couponPrice,
		od.salePrice,
		od.productMoney,
		od.savedMoney,

		op.detailNum,
		op.optionValue,
		od.detailNum2,
		op2.optionValue AS
		optionValue2,

		od.detailNum3,
		op3.optionValue AS optionValue3,
		od.detailNum4,
		op4.optionValue AS optionValue4,

		od.productNum,
		p.productName,
		od.detailState,
		dsi.changeSort, dsi.changeState,
		dsi.reg_date, dsi.com_date, adminMemo, cancelCost,
		dsi.changeNum,

		pd.payMethod,
		po.memberIdx,
		m.userName,
		productCancelM,
		deliveryCharge
		FROM
		orderDetail od
		JOIN
		product p ON od.productNum = p.productNum
		JOIN
		optionDetail op ON od.detailNum = op.detailNum
		JOIN
		optionDetail op2 ON
		od.detailNum2 = op2.detailNum
		LEFT JOIN
		optionDetail op3 ON
		od.detailNum3 = op3.detailNum
		LEFT JOIN
		optionDetail op4 ON
		od.detailNum4 = op4.detailNum
		LEFT JOIN
		orderChange dsi ON
		od.orderDetailNum = dsi.orderDetailNum
		LEFT JOIN
		payDetail pd ON
		od.orderNum = pd.orderNum
		LEFT JOIN
		productOrder po ON od.orderNum =
		po.orderNum
		LEFT JOIN
		member1 m ON po.memberIdx = m.memberIdx

		<where>
			<if test="state == 'returnApply'">
				dsi.changeState = 6
			</if>
			<if test="state == 'returnReceipt'">
				dsi.changeState = 7
			</if>
			<if test="state == 'returnComplete'">
				dsi.changeState = 8
			</if>
			<if test="state == 'returnNo'">
				dsi.changeState = 9
			</if>
		</where>
		ORDER BY od.orderNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size}
		ROWS ONLY
	</select>


	<select id="listFile" parameterType="Long" resultType="map">
		select
		fileNum, changeNum, fileName
		from cancelFile where changeNum =
		#{changeNum}
	</select>

	<update id="updateChange" parameterType="map">
		UPDATE
		orderChange SET changeState = #{changeState}
		<if test="PchangeState == 7">
			, com_date = sysdate, adminMemo = #{adminMemo}, shipCost =
			#{deliveryCharge}
		</if>
		WHERE changeNum = #{changeNum}
	</update>

	<update id="updateOrderDetailState" parameterType="map">
		UPDATE
		orderDetail SET detailState = #{changeState}
		WHERE orderDetailNum =
		#{orderDetailNum}
	</update>

	<update id="updateOrder" parameterType="map">
		UPDATE
		productOrder SET
		cancelAmount = #{cancelCost}
		WHERE orderNum =
		#{orderNum}
	</update>

	<select id="findByMoney" parameterType="String"
		resultType="Integer">
		select cancelAmount from productOrder where orderNum =
		#{orderNum}
	</select>

	<!-- 주문에 대한 상세 주문의 주문 취소 이외의 개수 -->
	<select id="totalOrderCount" parameterType="String"
		resultType="Integer">
		SELECT NVL(COUNT(*), 0) orderCount
		FROM orderDetail
		WHERE
		orderNum = #{orderNum} AND (detailState != 3 AND detailState != 5 AND
		detailState != 12)
	</select>

	<update id="updateOrderState" parameterType="map">
		UPDATE
		productOrder
		SET orderState = 6
		WHERE orderNum =
		#{orderNum}
	</update>

	<insert id="updatePoint" parameterType="map">
		insert into
		point(pointNum,orderNum,memberIdx,reg_date,memo,p_qyt,p_sort)
		values(point_seq.NEXTVAL,#{orderNum},#{memberIdx},
		sysdate,'반품 으로 인한
		포인트 회수',#{savedMoney},NULL)
	</insert>

	<select id="findByStock" parameterType="map" resultType="map">
		select
		stockNum,totalStock from productStock
		where productNum = #{productNum}
		and detailNum = #{detailNum} and detailNum2 = #{detailNum2}
	</select>
	<select id="findByStock2" parameterType="map" resultType="map">
		select
		stockNum,totalStock from productStock
		where productNum = #{productNum}
		and detailNum = #{detailNum3} and detailNum2 = #{detailNum4}
	</select>

	<update id="updateStock" parameterType="map">
		update productStock set
		totalStock = #{totalStock} where stockNum = #{stockNum}
	</update>

	<insert id="updateUsedSaved" parameterType="map">
		insert into
		point(pointNum, orderNum ,memberIdx,reg_date,memo,p_qyt,p_sort)
		values(point_seq.NEXTVAL,#{orderNum},#{memberIdx},sysdate,
		'반품으로 인한 포인트
		복구',#{usedSaved},NULL)
	</insert>
</mapper>