<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fp.pet.mapper.CommunityMapper">


	<!-- 커뮤니티 등록 -->
	<insert id="insertCommunity" parameterType="com.fp.pet.domain.Community">
		INSERT INTO community(communityNum, categoryNum, userId, subject, content, park, parkname,
									 reg_date, showNo, hitCount)
			VALUES (community_seq.NEXTVAL, #{categoryNum}, #{userId}, #{subject}, #{content}, #{park, jdbcType=VARCHAR}, #{parkname, jdbcType=VARCHAR}, SYSDATE, 1, 0)
	</insert>
	
	<!-- 커뮤니티 파일등록 -->
	<insert id="insertCommunityFile" parameterType="com.fp.pet.domain.Community">
		INSERT INTO communityFile(fileNum, communityNum, filename)
			VALUES(communityFile_seq.NEXTVAL, community_seq.CURRVAL, #{filename})
	</insert>
	
	<!-- 카테고리 리스트 -->
	<select id="listCategory" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT categoryNum, categoryName, use, showNo 
		FROM communityCategory
		 <where>
         <if test="mode=='use'">
            use = 1
         </if>
      </where>
		ORDER BY categoryNum
	</select> 
	
	<!-- 검색조건 -->
	<sql id="where-list">
			<choose>
				<when test="schType == 'all' ">
				   ( INSTR(subject, #{kwd}) &gt; 0
			          OR DBMS_LOB.INSTR(c.content, #{kwd}) &gt; 0 )
				</when>
				<when test="schType == 'reg_date' ">
				   ( TO_CHAR(reg_date, 'YYYYMMDD') = #{kwd}
			          OR TO_CHAR(reg_date, 'YYYY-MM-DD') = #{kwd} )
				</when>
				<when test="schType == 'content'">
				    DBMS_LOB.INSTR(c.content, #{kwd}) &gt; 0
				</when>
				<otherwise>
				    INSTR(${schType}, #{kwd}) &gt; 0
				</otherwise>
			</choose>
		</sql>

	<!-- 전체 데이터수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0)
		FROM community c
		JOIN member1 m ON c.userId = m.userId
		JOIN communityCategory cc ON cc.categoryNum = c.categoryNum
		<where>
         cc.use = 1  AND c.showNo = 1
         <if test="categoryNum!=0">
            AND ( c.categoryNum = #{categoryNum} )
         </if>
         <if test="kwd!=null and kwd!='' ">
            AND <include refid="where-list"/>
         </if>
      </where>
	</select>
	
	<!-- 커뮤니티 리스트 -->
	<select id="listCommunity" parameterType="map" resultType="com.fp.pet.domain.Community">
    SELECT c.communityNum, c.categoryNum, c.userId, m.userName, 
			   subject, content, NVL(park, ' ') park, parkname, cg.categoryName, cg.categoryNum, hitCount, TO_CHAR(reg_date, 'YYYY-MM-DD') reg_date,
			   NVL(replyCount, 0) replyCount 
		FROM community c
		JOIN member1 m ON c.userId = m.userId
		JOIN communityCategory cg ON cg.categoryNum = c.categoryNum
		LEFT OUTER JOIN (
			SELECT communityNum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY fileNum) filename
            FROM communityFile
            GROUP BY communityNum	
		) f ON c.communityNum = f.communityNum 
		LEFT OUTER JOIN (
			SELECT communityNum, COUNT(*) replyCount FROM communityReply
			WHERE answer = 0 AND showReply=1
			GROUP BY communityNum
		) r ON r.communityNum = c.communityNum
		<where>
         cg.use = 1  AND c.showNo = 1
         <if test="categoryNum!=0">
            AND ( c.categoryNum = #{categoryNum} )
         </if>
         <if test="kwd!=null and kwd!='' ">
            AND <include refid="where-list"/>
         </if>
      </where>
		ORDER BY communityNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 글보기 -->
	<select id="findById" parameterType="Long" resultType="com.fp.pet.domain.Community">
		SELECT c.communityNum, c.categoryNum, c.userId, m.userName, subject, content, NVL(park, ' ') park, parkname, 
        	cg.categoryName, TO_CHAR(reg_date, 'YYYY-MM-DD') reg_date, hitCount,
        	NVL(boardLikeCount, 0) boardLikeCount
		FROM community c   
		JOIN member1 m ON c.userId = m.userId    
		JOIN communityCategory cg ON cg.categoryNum = c.categoryNum
        LEFT OUTER JOIN (
			SELECT communityNum, COUNT(*) boardLikeCount FROM communityLike
			GROUP BY communityNum
		) bc ON c.communityNum = bc.communityNum
		WHERE c.communityNum = #{communityNum}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Long">
		UPDATE community SET hitCount=hitCount+1 WHERE communityNum = #{communityNum}
	</update>
		
	<!-- 이전글 -->
	<select id="findByPrev" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT communityNum, subject
		FROM community c 
		JOIN member1 m ON c.userId=m.userId
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
			AND (communityNum &gt; #{communityNum})
		</where>
		ORDER BY communityNum ASC
		FETCH FIRST 1 ROWS ONLY
	</select>

	<!-- 다음글 -->
	<select id="findByNext" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT communityNum, subject
		FROM community c 
		JOIN member1 m ON c.userId=m.userId
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
			AND (communityNum &lt; #{communityNum})
		</where>
		ORDER BY communityNum DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!-- 수정 -->
	<update id="updateCommunity" parameterType="com.fp.pet.domain.Community">
		UPDATE community SET categoryNum = #{categoryNum}, subject = #{subject}, content = #{content}, reg_date = SYSDATE, park = #{park}, parkname = #{parkname}
		WHERE communityNum = #{communityNum}		    
	</update>

	<update id="updateCommunityFile" parameterType="com.fp.pet.domain.Community">
		UPDATE communityFile SET filename = #{filename}
		WHERE communityNum = #{communityNum}		
	</update>
	
	<!-- 커뮤니티 파일리스트 -->
	<select id="findByFileId" parameterType="Long" resultType="com.fp.pet.domain.Community">
		SELECT fileNum, communityNum, filename
		FROM communityFile
		WHERE fileNum = #{fileNum}
	</select>
	
	<select id="listCommunityFile" parameterType="Long" resultType="com.fp.pet.domain.Community">
		SELECT fileNum, communityNum, filename
		FROM communityFile
		WHERE communityNum = #{communityNum}
	</select>
	
	<!-- 커뮤니티 삭제 -->
	<delete id="deleteCommunityFile" parameterType="map" >
		DELETE FROM communityFile
		WHERE ${field} = #{communityNum}
	</delete>
	
	<delete id="deleteCommunity" parameterType="Long">
		DELETE FROM community
		WHERE communityNum = #{communityNum}
	</delete>
	
	<!-- 게시글 좋아요 추가 -->
	<insert id="insertBoardLike" parameterType="map">
		INSERT INTO communityLike(communityNum, userId) 
			VALUES (#{communityNum}, #{userId})
	</insert>
	
	<!-- 게시글 좋아요 삭제 -->
	<delete id="deleteBoardLike" parameterType="map">
		DELETE FROM communityLike 
		WHERE communityNum = #{communityNum} 
		AND userId = #{userId}
	</delete>
	
	<!-- 게시글 좋아요 개수 -->
	<select id="boardLikeCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*) FROM communityLike 
		WHERE communityNum = #{communityNum}
	</select>
	
	<!-- 게시글 좋아요 여부 -->
	<select id="userBoardLiked" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT communityNum, userId 
		FROM communityLike 
		WHERE communityNum = #{communityNum} 
		AND userId = #{userId}
	</select>
	
	<!-- 댓글 -->
	<insert id="insertReply" parameterType="com.fp.pet.domain.Reply">
		INSERT INTO communityReply(replyNum, communityNum, userId, content, answer, showReply, reg_date)
		VALUES (communityReply_seq.NEXTVAL, #{communityNum}, #{userId}, #{content}, #{answer}, 1, SYSDATE)
	</insert>
	
	<!-- 댓글개수 -->	
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM communityReply
		WHERE communityNum = #{communityNum} 
		AND answer=0
		<if test="membership lt 51">
			AND ( showReply=1 OR ( showReply=0 AND userId=#{userId} ) )
		</if>
	</select>
	
	<!-- 댓글리스트 -->
	<select id="listReply" parameterType="map" resultType="com.fp.pet.domain.Reply">
    	SELECT r.replyNum, r.userId, userName, r.communityNum, content, r.reg_date, NVL(showReply, 1) showReply, 
			   NVL(answerCount, 0) answerCount
		FROM communityReply r
		JOIN member1 m ON r.userId = m.userId
		LEFT OUTER JOIN (
			SELECT answer, COUNT(*) answerCount
			FROM communityReply
			WHERE answer!=0
			<if test="membership lt 51">
				AND ( showReply=1 OR ( showReply=0 AND userId=#{userId} ) )
			</if>
			GROUP BY answer
		) a ON r.replyNum = a.answer
		WHERE r.communityNum= #{communityNum} AND r.answer=0
		<if test="membership lt 51">
				AND ( showReply=1 OR ( showReply=0 AND m.userId=#{userId} ) )
		</if>
		ORDER BY r.replyNum DESC
	</select>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteReply" parameterType="map">
		DELETE FROM communityReply
		WHERE replyNum = #{replyNum}
		<if test="mode=='reply'">
			OR answer = #{replyNum}
		</if>
	</delete>
	
	<!-- 댓글의 답글 리스트 -->
	<select id="listReplyAnswer" parameterType="map" resultType="com.fp.pet.domain.Reply">
		SELECT replyNum, communityNum, r.userId, userName, content, 
		       reg_date, answer, NVL(showReply, 1) showReply
		FROM communityReply r
		JOIN member1 m ON r.userId = m.userId
		WHERE answer = #{answer}
		<if test="membership lt 51">
			AND ( showReply=1 OR ( showReply=0 AND r.userId=#{userId} ) )
		</if>
		ORDER BY replyNum DESC
	</select>
	
		<!-- 댓글의 답글 개수 -->
	<select id="replyAnswerCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM communityReply
		WHERE answer = #{answer}
		<if test="membership lt 51">
			AND ( showReply=1 OR ( showReply=0 AND userId=#{userId} ) )
		</if>
	</select>
	
	<!-- 댓글 보이기/숨기기 -->
	<update id="updateReplyShowHide" parameterType="map">
		UPDATE communityReply SET showReply = #{showReply}
		WHERE replyNum = #{replyNum} AND userId = #{userId}
	</update>
	
	<select id="listParkAddr" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT communityNum, parkname, park
		FROM community
		WHERE communityNum = #{communityNum}	
	</select>

	<!-- 친구신청 > 친구 신청했을 때 -->
	<insert id="addFriend" parameterType="com.fp.pet.domain.Friend">
		INSERT INTO friendlist(friendNum, from_friend, to_friend, is_friend, reg_date)
			values(friendlist_seq.NEXTVAL, #{userId}, #{userName}, 1, SYSDATE)
	</insert>
	
	<!-- 친구신청 > 친구 신청 받았을 때 -->
	<insert id="addFriend2" parameterType="com.fp.pet.domain.Friend">
		INSERT INTO friendlist(friendNum, from_friend, to_friend, is_friend, reg_date)
			values(friendlist_seq.NEXTVAL, #{userName}, #{userId}, 0, SYSDATE)
	</insert>
	
	<!-- 친구정보 -->
	<select id="findByfriend" parameterType="map" resultType="Integer">
		select nvl(count(*),0) 
        from friendlist fl, member1 m, member1 m2
        where fl.from_friend(+) = m.userName
        and fl.to_friend = m2.userName
        and m.userName= #{userId2}
        and m2.userName = #{userName2};
	</select>
	
	<select id="findName" parameterType="Long" resultType="com.fp.pet.domain.Friend">
		select userName 
		from community c, member1 m
        where c.userId = m.userId
        and communityNum = #{communityNum}
	</select>
	
	
	
	
	<!-- 데이터 개수 -->
	<select id="dataCount2" parameterType="map" resultType="Integer">
		SELECT count(*)
		FROM community
		WHERE userId = #{userId}
	</select>
	
	<!-- 내가쓴 글 리스트  -->
	<select id="listCommunity2" parameterType="map" resultType="com.fp.pet.domain.Community">
	SELECT c.communityNum, c.userId, m.userName, 
			   subject, content, hitCount, TO_CHAR(reg_date, 'YYYY-MM-DD') reg_date,
			   NVL(replyCount, 0) replyCount ,f.filename
		FROM community c
		JOIN member1 m ON c.userId = m.userId
		LEFT OUTER JOIN (
			SELECT communityNum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY fileNum) filename
            FROM communityFile
            GROUP BY communityNum	
		) f ON c.communityNum = f.communityNum 
		LEFT OUTER JOIN (
			SELECT communityNum, COUNT(*) replyCount FROM communityReply
			WHERE answer = 0 AND showReply=1
			GROUP BY communityNum
		) r ON r.communityNum = c.communityNum
        WHERE c.userId = #{userId}
		ORDER BY reg_date DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select> 
	
	<!-- 좋아요 개수 -->
	<select id="likeCount2" parameterType="map" resultType="Integer">
		SELECT COUNT(*) 
		FROM communityLike
		WHERE userId = #{userId}
	</select>
	
	<!-- 좋아요 누른 커뮤니티 글 -->
	<select id="listLike2" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT c.communityNum, c.userId, 
           subject, content, hitCount, TO_CHAR(reg_date, 'YYYY-MM-DD') reg_date,
           f.filename
		FROM community c
		LEFT OUTER JOIN (
			SELECT communityNum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY fileNum) filename
            FROM communityFile
            GROUP BY communityNum	
		) f ON c.communityNum = f.communityNum 
		JOIN communityLike cl ON c.communityNum = cl.communityNum
        WHERE cl.userId = #{userId}
		ORDER BY reg_date DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	
</mapper>