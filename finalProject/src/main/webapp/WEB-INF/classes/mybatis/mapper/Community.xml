<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fp.pet.mapper.CommunityMapper">

	<!-- 커뮤니티 등록 -->
	<insert id="insertCommunity" parameterType="com.fp.pet.domain.Community">
		INSERT INTO community(communityNum, categoryNum, userId, subject, content, park,
									 reg_date, showNo, hitCount)
			VALUES (community_seq.NEXTVAL, #{categoryNum}, #{userId}, #{subject}, #{content}, #{park, jdbcType=VARCHAR}, SYSDATE, 1, 0 )
	</insert>
	
	<!-- 커뮤니티 파일등록 -->
	<insert id="insertCommunityFile" parameterType="com.fp.pet.domain.Community">
		INSERT INTO communityFile(fileNum, num, filename)
			VALUES(communityFile_seq.NEXTVAL, community_seq.CURRVAL, #{filename})
	</insert>
	
	<!-- 카테고리 리스트 
	<select id="listCategory" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT categoryNum, categoryName, use, showNo 
		FROM communityCategory
		WHERE use = 1 
		AND showNo = 1 
	</select> -->
	
	<!-- 검색조건 -->
	<sql id="where-list">
			<choose>
				<when test="schType == 'all' ">
				   ( INSTR(subject, #{kwd}) &gt; 0
			          OR DBMS_LOB.INSTR(c.content, #{kwd}) &gt; 0 )
				</when>
				<when test="schType == 'reg_date' ">
				   ( TO_CHAR(reg_date, 'YYYYMMDD') = #{kwd}
			          OR TO_CHAR(reg_date, 'YYYY-MM-DD') = #{kwd} )
				</when>
				<when test="schType == 'content'">
				    DBMS_LOB.INSTR(c.content, #{kwd}) &gt; 0
				</when>
				<otherwise>
				    INSTR(${schType}, #{kwd}) &gt; 0
				</otherwise>
			</choose>
		</sql>

	<!-- 전체 데이터수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0)
		FROM community c
		JOIN member1 m ON c.userId = m.userId
		JOIN communityCategory cc ON cc.categoryNum = c.categoryNum
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
		</where>  
		AND cc.use = 1 
		AND c.showNo = 1
	</select>
	
	<!-- 커뮤니티 리스트 -->
	<select id="listCommunity" parameterType="map" resultType="com.fp.pet.domain.Community">
    SELECT c.communityNum, c.categoryNum, c.userId, m.userName, 
			   subject, content, NVL(park, ' ') park, cg.categoryName, hitCount, TO_CHAR(reg_date, 'YYYY-MM-DD') reg_date,
			   NVL(replyCount, 0) replyCount 
		FROM community c
		JOIN member1 m ON c.userId = m.userId
		JOIN communityCategory cg ON cg.categoryNum = c.categoryNum
		LEFT OUTER JOIN (
			SELECT num, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY fileNum) filename
            FROM communityFile
            GROUP BY num	
		) f ON c.communityNum = f.num 
		LEFT OUTER JOIN (
			SELECT communityNum, COUNT(*) replyCount FROM communityReply
			WHERE answer = 0 AND showReply=1
			GROUP BY communityNum
		) r ON r.communityNum = c.communityNum
		<where>
			<if test="kwd != null and kwd != ''">
				<include refid="where-list"/>
			</if>
		</where> 
		AND cg.use = 1 
		AND c.showNo = 1 
		ORDER BY communityNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 글보기 -->
	<select id="findById" parameterType="Long" resultType="com.fp.pet.domain.Community">
		SELECT c.communityNum, c.categoryNum, c.userId, m.userName, subject, content, NVL(park, ' ') park, 
		       cg.categoryName, TO_CHAR(reg_date, 'YYYY-MM-DD') reg_date, fileName
		FROM community c   
		JOIN member1 m ON c.userId = m.userId    
		JOIN communityCategory cg ON cg.categoryNum = c.categoryNum
		LEFT OUTER JOIN (
			SELECT num, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY fileNum) filename
            FROM communityFile
            GROUP BY num	
		) f ON c.communityNum = f.num 
		WHERE c.communityNum = #{communityNum}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Long">
		UPDATE community SET hitCount=hitCount+1 WHERE communityNum = #{communityNum}
	</update>
		
	<!-- 이전글 -->
	<select id="findByPrev" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT communityNum, subject
		FROM community c 
		JOIN member1 m ON c.userId=m.userId
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
			AND (communityNum &gt; #{communityNum})
		</where>
		ORDER BY communityNum ASC
		FETCH FIRST 1 ROWS ONLY
	</select>

	<!-- 다음글 -->
	<select id="findByNext" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT communityNum, subject
		FROM community c 
		JOIN member1 m ON c.userId=m.userId
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
			AND (communityNum &lt; #{communityNum})
		</where>
		ORDER BY communityNum DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!-- 수정 -->
	<update id="updateCommunity" parameterType="com.fp.pet.domain.Community">
		UPDATE community SET categoryNum = #{categoryNum}, subject = #{subject}, content = #{content}, reg_date = SYSDATE
		WHERE communityNum = #{communityNum}		    
	</update>

	<update id="updateCommunityFile" parameterType="com.fp.pet.domain.Community">
		UPDATE communityFile SET filename
		WHERE num = #{communityNum}		
	</update>
	
	<!-- 커뮤니티 파일리스트 -->
	<select id="listCommunityFile" parameterType="Long" resultType="com.fp.pet.domain.Community">
		SELECT fileNum, num, filename
		FROM communityFile
		WHERE fileNum = #{fileNum}
	</select>
	
	<!-- 커뮤니티 삭제 -->
	<delete id="deleteCommunityFile" parameterType="Long" >
		DELETE FROM communityFile
		WHERE num = #{communityNum}
	</delete>
	
	<delete id="deleteCommunity" parameterType="Long">
		DELETE FROM community
		WHERE communityNum = #{communityNum}
	</delete>
	
	<!-- 게시글 좋아요 추가 -->
	<insert id="insertCommunityLike" parameterType="map">
		INSERT INTO communityLike (communityNum, userId) VALUES (#{communityNum}, #{userId})
	</insert>
	
	<!-- 게시글 좋아요 삭제 -->
	<delete id="deleteCommunityLike" parameterType="map">
		DELECT FROM communityLike WHERE communityNum = #{communityNum} AND userId = #{userId}
	</delete>
	
	<!-- 게시글 좋아요 개수 -->
	<select id="communityLikeCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*) FROM communityLike WHERE communityNum = #{communityNum}
	</select>
	
	<!-- 게시글 좋아요 여부 -->
	<select id="userCommunityLiked" parameterType="map" resultType="com.fp.pet.domain.Community">
		SELECT communityNum, userId FROM communityLike WHERE communityNum = #{communityNum} AND userId = #{userId}
	</select>
	
	

</mapper>